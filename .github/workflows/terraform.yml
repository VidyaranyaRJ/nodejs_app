# name: Terraform EC2 Deployment

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
#   workflow_dispatch:

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     environment: AWS
#     defaults:
#       run:
#         working-directory: ./code/
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
      
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.5.0
        
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-2
    
#     - name: Verify AWS CLI
#       run: aws sts get-caller-identity
        
#     - name: Terraform Init with S3 Backend
#       run: |
#         terraform init \
#           -backend-config="bucket=vj-test-ecr-79" \
#           -backend-config="key=terraform.tfstate" \
#           -backend-config="region=us-east-2" \
#           -backend-config="encrypt=true"

#     - name: Terraform Format
#       run: terraform fmt -check
#       continue-on-error: true

#     - name: Terraform Validate
#       run: terraform validate

#     # - name: Terraform Plan
#     #   run: |
#     #     export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
#     #     export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#     #     terraform plan -input=false -no-color -out=tfplan
#     #   timeout-minutes: 5
      
#     # - name: Terraform Apply
#     #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     #   run: |
#     #     export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
#     #     export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#     #     terraform apply -auto-approve tfplan
#     #   timeout-minutes: 10


#     #Destroy resources
#     - name: Terraform Destroy
#       run: |
#         echo "DESTROYING ALL RESOURCES!"
#         export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
#         export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#         terraform destroy -auto-approve
#       timeout-minutes: 12



#     # # Ensure ECR repository exists before proceeding
#     # - name: Ensure ECR Repository Exists
#     #   run: |
#     #     if ! aws ecr describe-repositories --repository-names nodejs-app --region us-east-2 2>/dev/null; then
#     #       aws ecr create-repository --repository-name nodejs-app --region us-east-2
#     #     fi

#     # # Retrieve AWS Account ID dynamically
#     # - name: Get AWS Account ID
#     #   run: |
#     #     AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
#     #     echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV

#     # # Get ECR Repository URI dynamically
#     # - name: Get ECR Repository URI
#     #   run: |
#     #     ECR_REPO_URI=$(aws ecr describe-repositories --repository-names nodejs-app --query "repositories[0].repositoryUri" --output text --region us-east-2)
#     #     echo "ECR_REPO_URI=${ECR_REPO_URI}" >> $GITHUB_ENV

#     # # Docker build and push steps
#     # - name: Build Docker image
#     #   run: |
#     #     docker build -t nodejs-app .

#     # - name: Log in to Amazon ECR
#     #   run: |
#     #     aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REPO_URI

#     # - name: Tag Docker image
#     #   run: |
#     #     docker tag nodejs-app:latest $ECR_REPO_URI:latest

#     # - name: Push Docker image to ECR
#     #   run: |
#     #     docker push $ECR_REPO_URI:latest



# name: Terraform and ECS Deployment

# on:
#   push:
#     branches: [ main, deploy-to-ecs ]
#   pull_request:
#     branches: [ main ]
#   workflow_dispatch:

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     environment: AWS
#     defaults:
#       run:
#         working-directory: ./code/
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
      
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.5.0
        
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-2
    
#     - name: Verify AWS CLI
#       run: aws sts get-caller-identity
        
#     - name: Terraform Init with S3 Backend
#       run: |
#         terraform init \
#           -backend-config="bucket=vj-test-ecr-79" \
#           -backend-config="key=terraform.tfstate" \
#           -backend-config="region=us-east-2" \
#           -backend-config="encrypt=true"

#     - name: Terraform Format
#       run: terraform fmt -check
#       continue-on-error: true

#     - name: Terraform Validate
#       run: terraform validate

#     # #Destroy resources
#     # - name: Terraform Destroy
#     #   run: |
#     #     echo "DESTROYING ALL RESOURCES!"
#     #     export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
#     #     export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#     #     terraform destroy -auto-approve
#     #   timeout-minutes: 12


#     - name: Terraform Plan
#       run: |
#         export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
#         export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#         terraform plan -input=false -no-color -out=tfplan
#       timeout-minutes: 5
      
#     - name: Terraform Apply
#       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#       run: |
#         export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
#         export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#         terraform apply -auto-approve tfplan
#       timeout-minutes: 10

#     # Get outputs from Terraform for ECS deployment
#     - name: Get Terraform Outputs
#       if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy-to-ecs'
#       id: terraform-outputs
#       run: |
#         # Store any outputs needed for ECS deployment
#         # Example: ECS cluster name, VPC info, etc.
#         echo "ecs_cluster=$(terraform output -raw ecs_cluster_name || echo 'DevCluster')" >> $GITHUB_OUTPUT
#         echo "ecs_service=$(terraform output -raw ecs_service_name || echo 'nodejs-app-service')" >> $GITHUB_OUTPUT

#   build-and-deploy:
#     needs: terraform
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy-to-ecs'
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3
      
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-2
        
#     # Ensure ECR repository exists
#     - name: Ensure ECR Repository Exists
#       run: |
#         if ! aws ecr describe-repositories --repository-names nodejs-app --region us-east-2 2>/dev/null; then
#           aws ecr create-repository --repository-name nodejs-app --region us-east-2
#         fi

#     # Login to ECR
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
#       with:
#         mask-password: 'true'
        
#     # Build and push image to ECR
#     - name: Build, Tag, and Push Image to ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#         REPOSITORY: nodejs-app
#       run: |
#         cd nodejs-app
#         docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
#         docker tag $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY:latest
#         docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$REPOSITORY:latest
#         echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
#     # Render ECS task definition with new image
#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: nodejs-app-task-definition.json
#         container-name: nodejs-app
#         image: ${{ steps.build-image.outputs.image }}
        
#     # Deploy to ECS
#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ needs.terraform.outputs.ecs_service || 'nodejs-app-service' }}
#         cluster: ${{ needs.terraform.outputs.ecs_cluster || 'DevCluster' }}
#         wait-for-service-stability: true



name: Terraform and ECS Deployment

on:
  push:
    branches: [ main, deploy-to-ecs ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: AWS
    defaults:
      run:
        working-directory: ./code/
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Verify AWS CLI
      run: aws sts get-caller-identity
        
    - name: Terraform Init with S3 Backend
      run: |
        terraform init \
          -backend-config="bucket=vj-test-ecr-79" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=us-east-2" \
          -backend-config="encrypt=true"

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: |
        export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        terraform plan -input=false -no-color -out=tfplan
      timeout-minutes: 5
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        terraform apply -auto-approve tfplan
      timeout-minutes: 10

    # Store Terraform outputs in S3
    - name: Store Terraform Outputs in S3
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Create outputs file with default values if not available
        echo '{
          "ecs_cluster_name": "DevCluster",
          "ecs_service_name": "nodejs-app-service",
          "ecr_repository_url": "'$(aws ecr describe-repositories --repository-names nodejs-app --query "repositories[0].repositoryUri" --output text --region us-east-2)'",
          "vpc_id": "'$(terraform output -raw vpc_id 2>/dev/null || echo "default")'",
          "subnet_ids": ["'$(terraform output -raw subnet_id 2>/dev/null || echo "default")'"]
        }' > terraform_outputs.json
        
        # Upload to S3
        aws s3 cp terraform_outputs.json s3://vj-test-ecr-79/terraform_outputs.json

  build-and-deploy:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/deploy-to-ecs'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    # Retrieve Terraform outputs from S3
    - name: Retrieve Terraform Outputs from S3
      id: terraform-outputs
      run: |
        # Download outputs file
        aws s3 cp s3://vj-test-ecr-79/terraform_outputs.json terraform_outputs.json || echo '{"ecs_cluster_name":"DevCluster","ecs_service_name":"nodejs-app-service"}' > terraform_outputs.json
        
        # Extract values and set as outputs
        echo "ecs_cluster=$(jq -r '.ecs_cluster_name' terraform_outputs.json)" >> $GITHUB_OUTPUT
        echo "ecs_service=$(jq -r '.ecs_service_name' terraform_outputs.json)" >> $GITHUB_OUTPUT
        echo "ecr_repo_url=$(jq -r '.ecr_repository_url' terraform_outputs.json)" >> $GITHUB_OUTPUT
      
    # Ensure ECR repository exists
    - name: Ensure ECR Repository Exists
      run: |
        if ! aws ecr describe-repositories --repository-names nodejs-app --region us-east-2 2>/dev/null; then
          aws ecr create-repository --repository-name nodejs-app --region us-east-2
        fi

    # Login to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
        
    # Build and push image to ECR
    - name: Build, Tag, and Push Image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        REPOSITORY: nodejs-app
      run: |
        # Determine where Dockerfile is located
        if [ -d "./nodejs-app" ] && [ -f "./nodejs-app/Dockerfile" ]; then
          DOCKER_PATH="./nodejs-app"
        else
          DOCKER_PATH="."
        fi
        
        # Build and push
        docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG $DOCKER_PATH
        docker tag $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY:latest
        docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    # Create task definition file if it doesn't exist
    - name: Create ECS Task Definition
      run: |
        if [ ! -f "nodejs-app-task-definition.json" ]; then
          cat > nodejs-app-task-definition.json << EOF
        {
          "family": "nodejs-app",
          "executionRoleArn": "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/ecsTaskExecutionRole",
          "networkMode": "awsvpc",
          "containerDefinitions": [
            {
              "name": "nodejs-app",
              "image": "${{ steps.build-image.outputs.image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 3000,
                  "hostPort": 3000,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/nodejs-app",
                  "awslogs-region": "us-east-2",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {
                  "name": "NODE_ENV",
                  "value": "production"
                }
              ],
              "cpu": 256,
              "memory": 512
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512"
        }
        EOF
        fi
        
    # Create log group if it doesn't exist
    - name: Ensure CloudWatch Log Group Exists
      run: |
        if ! aws logs describe-log-groups --log-group-name-prefix "/ecs/nodejs-app" --region us-east-2 | grep -q "/ecs/nodejs-app"; then
          aws logs create-log-group --log-group-name "/ecs/nodejs-app" --region us-east-2
        fi
    
    # Create IAM execution role if it doesn't exist
    - name: Ensure ECS Task Execution Role Exists
      run: |
        if ! aws iam get-role --role-name ecsTaskExecutionRole 2>/dev/null; then
          # Create the role
          aws iam create-role --role-name ecsTaskExecutionRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ecs-tasks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          
          # Attach the required policies
          aws iam attach-role-policy --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        fi
        
    # Render ECS task definition with new image
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: nodejs-app-task-definition.json
        container-name: nodejs-app
        image: ${{ steps.build-image.outputs.image }}
    
    # Create ECS cluster if it doesn't exist
    - name: Ensure ECS Cluster Exists
      run: |
        if ! aws ecs describe-clusters --clusters ${{ steps.terraform-outputs.outputs.ecs_cluster }} --region us-east-2 | grep -q "ACTIVE"; then
          aws ecs create-cluster --cluster-name ${{ steps.terraform-outputs.outputs.ecs_cluster }} --region us-east-2
        fi
    
    # Create or update ECS service
    - name: Create or Update ECS Service
      run: |
        # Check if service exists
        if ! aws ecs describe-services --cluster ${{ steps.terraform-outputs.outputs.ecs_cluster }} --services ${{ steps.terraform-outputs.outputs.ecs_service }} --region us-east-2 | grep -q "ACTIVE"; then
          # Get default VPC and subnet information
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text --region us-east-2)
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text --region us-east-2 | tr '\t' ',')
          SECURITY_GROUP=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" --query "SecurityGroups[0].GroupId" --output text --region us-east-2)
          
          # Create a security group for the ECS service if needed
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP --protocol tcp --port 3000 --cidr 0.0.0.0/0 --region us-east-2 || true
          
          # Create the service
          aws ecs create-service \
            --cluster ${{ steps.terraform-outputs.outputs.ecs_cluster }} \
            --service-name ${{ steps.terraform-outputs.outputs.ecs_service }} \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
            --region us-east-2
        else
          # Update the service
          aws ecs update-service \
            --cluster ${{ steps.terraform-outputs.outputs.ecs_cluster }} \
            --service ${{ steps.terraform-outputs.outputs.ecs_service }} \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --region us-east-2
        fi
    
    # Wait for service stability
    - name: Wait for ECS Service Stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ steps.terraform-outputs.outputs.ecs_cluster }} \
          --services ${{ steps.terraform-outputs.outputs.ecs_service }} \
          --region us-east-2