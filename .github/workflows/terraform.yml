name: Terraform EC2 Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: AWS
    defaults:
      run:
        working-directory: ./code/
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Verify AWS CLI
      run: aws sts get-caller-identity
        
    - name: Terraform Init with S3 Backend
      run: |
        terraform init \
          -backend-config="bucket=vj-test-ecr-79" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=us-east-2" \
          -backend-config="encrypt=true"

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      run: terraform validate

    # Commented out Plan step
    - name: Terraform Plan
      run: |
        export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        terraform plan -input=false -no-color -out=tfplan
      timeout-minutes: 5
      
    # Commented out Apply step
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        terraform apply -auto-approve tfplan
      timeout-minutes: 10
      
    # # Destroy resources
    # - name: Terraform Destroy
    #   run: |
    #     echo "DESTROYING ALL RESOURCES!"
    #     export TF_VAR_AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
    #     export TF_VAR_AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
    #     terraform destroy -auto-approve
    #   timeout-minutes: 15

    # Get the ECR repository URI dynamically
    - name: Get ECR Repository URI
      run: |
        ECR_REPO_URI=$(aws ecr describe-repositories --repository-names nodejs-app --query "repositories[0].repositoryUri" --output text)
        echo "ECR_REPO_URI=${ECR_REPO_URI}" >> $GITHUB_ENV

    # Docker build and push steps
    - name: Build Docker image
      run: |
        docker build -t nodejs-app .

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag nodejs-app:latest $ECR_REPO_URI:latest

    - name: Push Docker image to ECR
      run: |
        docker push $ECR_REPO_URI:latest